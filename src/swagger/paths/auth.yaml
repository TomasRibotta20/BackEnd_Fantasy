/auth/login:
  post:
    summary: Inicia sesión en la cuenta del usuario
    description: Autentica a un usuario y genera un token JWT para sesiones autenticadas.
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login'
    responses:
      200:
        description: Inicio de sesión exitoso.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'login successful'
                data:
                  type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
                    token:
                      type: string
                      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
      400:
        description: Datos de entrada inválidos.
      401:
        description: Credenciales inválidas.
      500:
        description: Error del servidor.
      404:
        description: Recurso no encontrado.
/auth/logout:
  post:
    summary: Cierra la sesión del usuario
    description: Invalida el token JWT del usuario para cerrar la sesión, y borra la sesión en la base de datos.
    tags: [Auth]
    security:
      - bearerAuth: []
    responses:
      200:
        description: Cierre de sesión exitoso.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'logout successful'
/auth/forgot-password:
  post:
    summary: Solicita un restablecimiento de contraseña
    description: Envía un correo electrónico con un enlace para restablecer la contraseña del usuario.
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: 'user@example.com'
    responses:
      200:
        description: Solicitud de restablecimiento de contraseña enviada.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'Password reset link sent to email'
      500:
        description: Error del servidor.
/auth/new-password:
  post:
    summary: Restablece la contraseña del usuario
    description: Permite al usuario restablecer su contraseña utilizando un token enviado por correo electrónico.
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                example: 'reset-token-123'
              newPassword:
                type: string
                format: password
                example: 'newSecurePassword123'
    responses:
      200:
        description: Contraseña restablecida exitosamente.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'Password has been reset successfully'
      401:
        description: Token inválido o expirado.
      400:
        description: Datos de entrada inválidos.
      500:
        description: Error del servidor.
/auth/refreshToken:
  post:
    summary: Refresca el token JWT del usuario
    description: Genera un nuevo token JWT utilizando un refresh token válido.
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              refreshToken:
                type: string
                example: 'refresh-token-123'
    responses:
      200:
        description: Token refrescado exitosamente.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'Token refreshed successfully'
                data:
                  type: object
                  properties:
                    token:
                      type: string
                      example: 'new-jwt-token-123'
      401:
        description: Refresh token inválido o expirado.
      400:
        description: Datos de entrada inválidos.
      404:
        description: Usuario no encontrado.
      500:
        description: Error del servidor.
/auth/register:
  post:
    summary: Registra un nuevo usuario
    description: Crea una nueva cuenta de usuario.
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Register'
    responses:
      201:
        description: Registro exitoso.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'User registered successfully'
                data:
                  type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
      400:
        description: Datos de entrada inválidos.
      409:
        description: El usuario ya existe.
      500:
        description: Error del servidor.
